.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Class::Most 3"
.TH Test::Class::Most 3 "2016-01-25" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Class::Most \- Test Classes the easy way
.SH "VERSION"
.IX Header "VERSION"
Version 0.08
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Instead of this:
.PP
.Vb 7
\&    use strict;
\&    use warnings;
\&    use Test::Exception 0.88;
\&    use Test::Differences 0.500;
\&    use Test::Deep 0.106;
\&    use Test::Warn 0.11;
\&    use Test::More 0.88;
\&
\&    use parent \*(AqMy::Test::Class\*(Aq;
\&
\&    sub some_test : Tests { ... }
.Ve
.PP
You type this:
.PP
.Vb 1
\&    use Test::Class::Most parent => \*(AqMy::Test::Class\*(Aq;
\&
\&    sub some_test : Tests { ... }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When people write test classes with the excellent \f(CW\*(C`Test::Class\*(C'\fR, you often
see the following at the top of the code:
.PP
.Vb 1
\&  package Some::Test::Class;
\&
\&  use strict;
\&  use warnings;
\&  use base \*(AqMy::Test::Class\*(Aq;
\&  use Test::More;
\&  use Test::Exception;
\&
\&  # and then the tests ...
.Ve
.PP
That's a lot of boilerplate and I don't like boilerplate.  So now you can do
this:
.PP
.Vb 1
\&  use Test::Class::Most parent => \*(AqMy::Test::Class\*(Aq;
.Ve
.PP
That automatically imports strict and warnings for you.  It also gives
you all of the testing goodness from Test::Most.
.SH "CREATING YOUR OWN BASE CLASS"
.IX Header "CREATING YOUR OWN BASE CLASS"
You probably want to create your own base class for testing.  To do this,
simply specify no import list:
.PP
.Vb 2
\&  package My::Test::Class;
\&  use Test::Class::Most; # we now inherit from Test::Class
\&
\&  INIT { Test::Class\->runtests }
\&
\&  1;
.Ve
.PP
And then your other classes inherit as normal (well, the way we do it):
.PP
.Vb 2
\&  package Tests::For::Foo;
\&  use Test::Class::Most parent => \*(AqMy::Test::Class\*(Aq;
.Ve
.PP
And you can inherit from those other classes, too:
.PP
.Vb 2
\&  package Tests::For::Foo::Child;
\&  use Test::Class::Most parent => \*(AqTests::For::Foo\*(Aq;
.Ve
.PP
Of course, it's quite possible that you're a fan of multiple inheritance, so
you can do that, too (I was \fIsoooooo\fR tempted to not allow this, but I
figured I shouldn't force too many of my personal beliefs on you):
.PP
.Vb 6
\& package Tests::For::ISuckAtOO;
\& use Test::Class::Most parent => [qw/
\&    Tests::For::Foo
\&    Tests::For::Bar
\&    Some::Other::Class::For::Increased::Stupidity
\& /];
.Ve
.PP
As a side note, it's recommended that even if you don't need test control
methods in your base class, put stubs in there:
.PP
.Vb 2
\&  package My::Test::Class;
\&  use Test::Class::Most; # we now inherit from Test::Class
\&
\&  INIT { Test::Class\->runtests }
\&
\&  sub startup  : Tests(startup)  {}
\&  sub setup    : Tests(setup)    {}
\&  sub teardown : Tests(teardown) {}
\&  sub shutdown : Tests(shutdown) {}
\&
\&  1;
.Ve
.PP
This allows developers to \fIalways\fR be able to safely call parent test control
methods rather than wonder if they are there:
.PP
.Vb 2
\&  package Tests::For::Customer;
\&  use Test::Class::Most parent => \*(AqMy::Test::Class\*(Aq;
\&
\&  sub setup : Tests(setup) {
\&    my $test = shift;
\&    $test\->next::method; # safe due to stub in base class
\&    ...
\&  }
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
You can also specify \*(L"attributes\*(R" which are merely very simple getter/setters.
.PP
.Vb 4
\&  use Test::Class::Most 
\&    parent      => \*(AqMy::Test::Class\*(Aq,
\&    attributes  => [qw/customer items/],
\&    is_abstract => 1;
\&
\&  sub setup : Tests(setup) {
\&    my $test = shift;
\&    $test\->SUPER::setup;
\&    $test\->customer( ... );
\&    $test\->items( ... );
\&  }
\&
\&  sub some_tests : Tests {
\&    my $test     = shift;
\&    my $customer = $test\->customer;
\&    ...
\&  }
.Ve
.PP
If called with no arguments, returns the current value.  If called with one
argument, sets that argument as the current value.  If called with more than
one argument, it croaks.
.SH "ABSTRACT CLASSES"
.IX Header "ABSTRACT CLASSES"
You may pass an optional \f(CW\*(C`is_abstract\*(C'\fR parameter in the import list. It takes
a boolean value. This value is advisory only and is not inherited. It defaults
to false if not provided.
.PP
Sometimes you want to identify a test class as \*(L"abstract\*(R". It may have a bunch
of tests, but those should only run for its subclasses. You can pass
\&\f(CW\*(C`<is_abstract =\*(C'\fR 1>> in the import list. Then, to test if a given class or
instance of that class is \*(L"abstract\*(R":
.PP
.Vb 5
\& sub dont_run_in_abstract_base_class : Tests {
\&     my $test = shift;
\&     return if Test::Class::Most\->is_abstract($test);
\&     ...
\& }
.Ve
.PP
Note that \f(CW\*(C`is_abstract\*(C'\fR is strictly \fBadvisory only\fR. You are expected
(required) to check the value yourself and take appropriate action.
.PP
We recommend adding the following method to your base class:
.PP
.Vb 4
\& sub is_abstract {
\&     my $test = shift;
\&     return Test::Class::Most\->is_abstract($test);
\& }
.Ve
.PP
And later in a subclass:
.PP
.Vb 1
\& if ( $test\->is_abstract ) { ... }
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
All functions from Test::Most are automatically exported into your
namespace.
.SH "TUTORIAL"
.IX Header "TUTORIAL"
If you're not familiar with using Test::Class, please see my tutorial at:
.IP "\(bu" 4
<http://www.modernperlbooks.com/mt/2009/03/organizing\-test\-suites\-with\-testclass.html>
.IP "\(bu" 4
<http://www.modernperlbooks.com/mt/2009/03/reusing\-test\-code\-with\-testclass.html>
.IP "\(bu" 4
<http://www.modernperlbooks.com/mt/2009/03/making\-your\-testing\-life\-easier.html>
.IP "\(bu" 4
<http://www.modernperlbooks.com/mt/2009/03/using\-test\-control\-methods\-with\-testclass.html>
.IP "\(bu" 4
<http://www.modernperlbooks.com/mt/2009/03/working\-with\-testclass\-test\-suites.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Curtis \*(L"Ovid\*(R" Poe, \f(CW\*(C`<ovid at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-test\-class\-most at
rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test\-Class\-Most>.  I will be
notified, and then you'll automatically be notified of progress on your bug as
I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Test::Class::Most
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Test\-Class\-Most>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Test\-Class\-Most>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Test\-Class\-Most>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Test\-Class\-Most/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Test::Class
.Sp
xUnit-style testing in Perl
.IP "\(bu" 4
Test::Most
.Sp
The most popular \s-1CPAN\s0 test modules bundled into one module.
.IP "\(bu" 4
Modern::Perl
.Sp
I stole this code.  Thanks \f(CW\*(C`chromatic\*(C'\fR!
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to Adrian Howard for Test::Class, Adam Kennedy for maintaining it
and \f(CW\*(C`chromatic\*(C'\fR for Modern::Perl.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2010 Curtis \*(L"Ovid\*(R" Poe, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
