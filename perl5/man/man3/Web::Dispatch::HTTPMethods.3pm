.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Web::Dispatch::HTTPMethods 3"
.TH Web::Dispatch::HTTPMethods 3 "2014-07-11" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Web::Dispatch::HTTPMethods \- Helpers to make RESTFul Dispatchers Easier
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyApp:WithHTTPMethods;
\&
\&    use Web::Simple;
\&    use Web::Dispatch::HTTPMethods;
\&
\&    sub as_text {
\&      [200, [\*(AqContent\-Type\*(Aq => \*(Aqtext/plain\*(Aq],
\&        [$_[0]\->{REQUEST_METHOD}, $_[0]\->{REQUEST_URI}] ]
\&    }
\&
\&    sub dispatch_request {
\&      sub (/get) {
\&        GET { as_text(pop) }
\&      },
\&      sub (/get\-head) {
\&        GET { as_text(pop) }
\&        HEAD { [204,[],[]] },
\&      },
\&      sub (/get\-post\-put) {
\&        GET { as_text(pop) }  ## NOTE: no commas separating http methods
\&        POST { as_text(pop) }
\&        PUT { as_text(pop) }
\&      },
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Exports the most commonly used \s-1HTTP\s0 methods as subroutine helpers into your
Web::Simple based application.
Use of these methods additionally adds an automatic \s-1HTTP\s0 code 405
\&\f(CW\*(C`Method Not Allowed\*(C'\fR response if none of the \s-1HTTP\s0 methods match for a given dispatch and
also adds a dispatch rule for \f(CW\*(C`HEAD\*(C'\fR if no \f(CW\*(C`HEAD\*(C'\fR exists but a \f(CW\*(C`GET\*(C'\fR does
(in which case the \f(CW\*(C`HEAD\*(C'\fR returns the \f(CW\*(C`GET\*(C'\fR dispatch with an empty body.)
.PP
We also add support at the end of the chain for the \s-1OPTIONS\s0 method.
This defaults to \s-1HTTP 200 OK +\s0 Allows http headers.
.PP
We also try to set correct \s-1HTTP\s0 headers such as \f(CW\*(C`Allows\*(C'\fR as makes sense based
on your dispatch chain.
.PP
The following dispatch chains are basically the same:
.PP
.Vb 10
\&    sub dispatch_request {
\&      sub (/get\-http\-methods) {
\&        GET { [200, [\*(AqContent\-Type\*(Aq => \*(Aqtext/plain\*(Aq], [\*(AqHello World\*(Aq]] }
\&      },
\&      sub(/get\-classic) {
\&        sub (GET) { [200, [\*(AqContent\-Type\*(Aq => \*(Aqtext/plain\*(Aq], [\*(AqHello World\*(Aq]] },
\&        sub (HEAD)  { [200, [\*(AqContent\-Type\*(Aq => \*(Aqtext/plain\*(Aq], []] },
\&        sub (OPTIONS)  {
\&          [200, [\*(AqContent\-Type\*(Aq => \*(Aqtext/plain\*(Aq, Allows=>\*(AqGET,HEAD,OPTIONS\*(Aq], []];
\&        },
\&        sub () {
\&          [405, [\*(AqContent\-Type\*(Aq => \*(Aqtext/plain\*(Aq, Allows=>\*(AqGET,HEAD,OPTIONS\*(Aq], 
\&           [\*(AqMethod Not Allowed\*(Aq]]
\&        },
\&      }
\&    }
.Ve
.PP
The idea here is less boilerplate to distract the reader from the main point of
the code and also to encapsulate some best practices.
.PP
\&\fB\s-1NOTE\s0\fR You currently cannot mix http method style and prototype sub style in
the same scope, as in the following example:
.PP
.Vb 6
\&    sub dispatch_request {
\&      sub (/get\-head) {
\&        GET { ... }
\&        sub (HEAD) { ... }
\&      },
\&    }
.Ve
.PP
If you try this our code will notice and issue a \f(CW\*(C`die\*(C'\fR.  If you have a good use
case please bring it to the authors.
.SS "\s-1EXPORTS\s0"
.IX Subsection "EXPORTS"
This automatically exports the following subroutines:
.PP
.Vb 6
\&    GET
\&    PUT
\&    POST
\&    HEAD
\&    DELETE
\&    OPTIONS
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
See Web::Simple for \s-1AUTHOR\s0
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
See Web::Simple for \s-1CONTRIBUTORS\s0
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
See Web::Simple for \s-1COPYRIGHT\s0
.SH "LICENSE"
.IX Header "LICENSE"
See Web::Simple for \s-1LICENSE\s0
